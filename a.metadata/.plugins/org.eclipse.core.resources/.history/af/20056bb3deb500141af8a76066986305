package com.arman.armaninsurance;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import android.R.string;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class databse extends SQLiteOpenHelper {

	
	public final String path="data/data/com.arman.armaninsurance/databases/";
	public final String Name="dbtest";
	public SQLiteDatabase mydb;
	
	private final Context mycontext;
	
	public databse(Context context) {
		super(context, "dbtest", null, 1);
		mycontext=context;
		
	}

	
	
	@Override
	public void onCreate(SQLiteDatabase arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onUpgrade(SQLiteDatabase arg0, int arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	public void database(){
		
		boolean checkdb=checkdb();
		
		if(checkdb){
			
			
		}else{
			
			this.getReadableDatabase();
			
			try{
			copydatabase();
			}catch(IOException e){
				
				
			}
			
		}
		
		
		
	}
	
	public void open(){
		
		mydb=SQLiteDatabase.openDatabase(path+Name, null, SQLiteDatabase.OPEN_READWRITE);
		
	}
	
	public void close(){
		mydb.close();
	}
	
	
	public boolean checkdb(){
		
		SQLiteDatabase db=null;
		try{	
		db=SQLiteDatabase.openDatabase(path+Name, null, SQLiteDatabase.OPEN_READONLY);
		}
		catch(SQLException e)
		{

		}
		return db !=null ? true:false ;
		
	}
	
	public void copydatabase() throws IOException{
		OutputStream myOutput = new FileOutputStream(path+Name);
		byte[] buffer = new byte[1024];
		int length;

		InputStream myInput = mycontext.getAssets().open("dbtest");
		while ((length = myInput.read(buffer)) > 0) {
		myOutput.write(buffer, 0, length);
		}
		myInput.close();
		myOutput.flush();
		myOutput.close();
	}
	
	
	
	public String Display(int tableNumber , int row,int fild){
		Cursor cu= mydb.query("["+Integer.toString(tableNumber)+"]", null, null, null, "F2", null, null);
		cu.moveToPosition(row);
		String name=cu.getString(fild);
		return name;
	}
	public int rowCount (String tableNumber){
		Cursor cu= mydb.rawQuery("select count(distinct F2 )  from ["+tableNumber+"]", null);
		cu.moveToPosition(0);
		String name=cu.getString(0);
		return Integer.valueOf(name);
	}
	
	public int rowCount2 (String tableNumber){
		Cursor cu= mydb.rawQuery("select count(distinct F1 )  from "+tableNumber, null);
		cu.moveToPosition(0);
		String name=cu.getString(0);
		return Integer.valueOf(name);
	}
	
	public String CityGroupBy (String tableNumber , int pos){
		Cursor cu= mydb.rawQuery("select [F2]  from [" +tableNumber+ "] group by [F2]", null);
		cu.moveToPosition(pos);
		String name=cu.getString(0);
		return name ;
	}
	public String CityGroupBy2 (String tableNumber , int pos){
		Cursor cu= mydb.rawQuery("select [F1]  from " + tableNumber+ " group by [F1]", null);
		cu.moveToPosition(pos);
		String name=cu.getString(0);
		return name ;
	}
	public String namayndebycity (String tableNumber , String cityname , int pos){
		Cursor cu= mydb.rawQuery("select [F1] from ["+tableNumber+"] where [f2] = '"+cityname+"'" , null);
		cu.moveToPosition(pos);
		String name=cu.getString(0);
		return name ;
	}
	public Cursor namayandeList (String tableNumber , String cityname){//address choose
		Cursor cu= mydb.rawQuery("select [F1],[F3] from ["+tableNumber+"] where [f2] = '"+cityname+"'" , null);
		return cu ;
	}
	public Cursor namayandeList2 (String tableNumber , String cityname){//address choose
		Cursor cu= mydb.rawQuery("select [F2],[F3] from "+tableNumber+" where [f1] = '"+cityname+"'" , null);
		return cu ;
	}	
	public List<String> namayandeDetails (String tableNumber , String address){//address choose
		Cursor cu= mydb.rawQuery("select [F1],[F2],[F3],[F4],[F5] from ["+tableNumber+"] where [f3] = '"+address+"'" , null);
		cu.moveToPosition(0);
		List<String> name =new ArrayList<String>();
		name.add(cu.getString(0));
		name.add(cu.getString(1));
		name.add(cu.getString(2));
		name.add(cu.getString(3));
		name.add(cu.getString(4));
	
		return name;
	}
	
	public List<String> darmanDetails (String tableNumber , String address){//address choose
		Cursor cu= mydb.rawQuery("select [F1],[F2],[F3],[F4] from "+tableNumber+" where [f3] = '"+address+"'" , null);
		cu.moveToPosition(0);
		List<String> name =new ArrayList<String>();
		name.add(cu.getString(0));
		name.add(cu.getString(1));
		name.add(cu.getString(2));
		name.add(cu.getString(3));
	
		return name;
	}
	
}
